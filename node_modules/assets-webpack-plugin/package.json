{
  "name": "assets-webpack-plugin",
  "version": "3.6.0",
  "description": "Emits a json file with assets paths",
  "main": "index.js",
  "scripts": {
    "lint": "standard --verbose | snazzy",
    "test": "mocha test"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/sporto/assets-webpack-plugin.git"
  },
  "keywords": [
    "webpack",
    "plugin",
    "generate",
    "assets",
    "hashes"
  ],
  "author": {
    "name": "Sebastian Porto"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/sporto/assets-webpack-plugin/issues"
  },
  "homepage": "https://github.com/sporto/assets-webpack-plugin",
  "devDependencies": {
    "chai": "^4.1.2",
    "css-loader": "^0.28.11",
    "lodash": "^3.9.3",
    "mocha": "^5.2.0",
    "rimraf": "^2.6.2",
    "snazzy": "^7.1.1",
    "standard": "^11.0.1",
    "style-loader": "^0.21.0",
    "webpack": "^4.8.3"
  },
  "dependencies": {
    "camelcase": "^5.0.0",
    "escape-string-regexp": "^1.0.3",
    "lodash.assign": "^4.2.0",
    "lodash.merge": "^4.6.1",
    "mkdirp": "^0.5.1"
  },
  "readme": "# assets-webpack-plugin\n[![Build Status](https://travis-ci.org/kossnocorp/assets-webpack-plugin.svg?branch=master)](https://travis-ci.org/kossnocorp/assets-webpack-plugin) [![Build status](https://ci.appveyor.com/api/projects/status/qmvi3h6lk0xu8833?svg=true)](https://ci.appveyor.com/project/kossnocorp/assets-webpack-plugin)\n\nWebpack plugin that emits a json file with assets paths.\n\n## Table of Contents\n\n- [Why Is This Useful?](#why-is-this-useful)\n\n- [Install](#install)\n\n- [Configuration](#configuration)\n\n- [Test](#test)\n\n- [Change Log](./CHANGELOG.md)\n\n- [Contributing Guidelines](./CONTRIBUTING.md)\n\n## Why Is This Useful?\n\nWhen working with Webpack you might want to generate your bundles with a generated hash in them (for cache busting).\n\nThis plug-in outputs a json file with the paths of the generated assets so you can find them from somewhere else.\n\n### Example output:\n\nThe output is a JSON object in the form:\n\n```json\n{\n    \"bundle_name\": {\n        \"asset_kind\": \"/public/path/to/asset\"\n    }\n}\n```\n\nWhere:\n\n  * `\"bundle_name\"` is the name of the bundle (the key of the entry object in your webpack config, or \"main\" if your entry is an array).\n  * `\"asset_kind\"` is the camel-cased file extension of the asset\n\nFor example, given the following webpack config:\n\n```js\n{\n    entry: {\n        one: ['src/one.js'],\n        two: ['src/two.js']\n    },\n    output: {\n        path: path.join(__dirname, \"public\", \"js\"),\n        publicPath: \"/js/\",\n        filename: '[name]_[hash].bundle.js'\n    }\n}\n```\n\nThe plugin will output the following json file:\n\n```json\n{\n    \"one\": {\n        \"js\": \"/js/one_2bb80372ebe8047a68d4.bundle.js\"\n    },\n    \"two\": {\n        \"js\": \"/js/two_2bb80372ebe8047a68d4.bundle.js\"\n    }\n}\n```\n\n## Install\n\n```sh\nnpm install assets-webpack-plugin --save-dev\n```\n\n## Configuration\n\nIn your webpack config include the plug-in. And add it to your config:\n\n```js\nvar path = require('path')\nvar AssetsPlugin = require('assets-webpack-plugin')\nvar assetsPluginInstance = new AssetsPlugin()\n\nmodule.exports = {\n    // ...\n    output: {\n        path: path.join(__dirname, \"public\", \"js\"),\n        filename: \"[name]-bundle-[hash].js\",\n        publicPath: \"/js/\"\n    },\n    // ....\n    plugins: [assetsPluginInstance]\n}\n```\n\n### Options\n\nYou can pass the following options:\n\n#### `filename`\n\nOptional. `webpack-assets.json` by default.\n\nName for the created json file.\n\n```js\nnew AssetsPlugin({filename: 'assets.json'})\n```\n\n#### `fullPath`\n\nOptional. `true` by default.\n\nIf `false` the output will not include the full path\nof the generated file.\n\n```js\nnew AssetsPlugin({fullPath: false})\n```\n\ne.g.\n\n`/public/path/bundle.js` vs `bundle.js vs`\n\n#### `includeManifest`\n\nOptional. `false` by default.\n\nInserts the manifest javascript as a `text` property in your assets.\nAccepts the name of your manifest chunk. A manifest is the last CommonChunk that\nonly contains the webpack bootstrap code. This is useful for production\nuse when you want to inline the manifest in your HTML skeleton for long-term caching.\nSee [issue #1315](https://github.com/webpack/webpack/issues/1315)\nor [a blog post](https://medium.com/@matt.krick/a-production-ready-realtime-saas-with-webpack-7b11ba2fa5b0#.p1vvfr3bm)\nto learn more.\n\n```js\nnew AssetsPlugin({includeManifest: 'manifest'})\n// assets.json:\n// {entries: {manifest: {js: `hashed_manifest.js`, text: 'function(modules)...'}}}\n//\n// Your html template:\n// <script>\n// {assets.entries.manifest.text}\n// </script>\n```\n\n#### `path`\n\nOptional. Defaults to the current directory.\n\nPath where to save the created JSON file.\n\n```js\nnew AssetsPlugin({path: path.join(__dirname, 'app', 'views')})\n```\n\n#### `prettyPrint`\n\nOptional. `false` by default.\n\nWhether to format the JSON output for readability.\n\n```js\nnew AssetsPlugin({prettyPrint: true})\n```\n\n#### `processOutput`\n\nOptional. Defaults is JSON stringify function.\n\nFormats the assets output.\n\n```js\nnew AssetsPlugin({\n  processOutput: function (assets) {\n    return 'window.staticMap = ' + JSON.stringify(assets)\n  }\n})\n```\n\n#### `update`\n\nOptional. `false` by default.\n\nWhen set to `true`, the output JSON file will be updated instead of overwritten.\n\n```js\nnew AssetsPlugin({update: true})\n```\n\n#### `metadata`\n\nInject metadata into the output file. All values will be injected into the key \"metadata\".\n\n```js\nnew AssetsPlugin({metadata: {version: 123}})\n// Manifest will now contain:\n// {\n//   metadata: {version: 123}\n// }\n```\n\n### Using in multi-compiler mode\n\nIf you use webpack multi-compiler mode and want your assets written to a single file,\nyou **must** use the same instance of the plugin in the different configurations.\n\nFor example:\n\n```js\nvar webpack = require('webpack')\nvar AssetsPlugin = require('assets-webpack-plugin')\nvar assetsPluginInstance = new AssetsPlugin()\n\nwebpack([\n  {\n    entry: {one: 'src/one.js'},\n    output: {path: 'build', filename: 'one-bundle.js'},\n    plugins: [assetsPluginInstance]\n  },\n  {\n    entry: {two:'src/two.js'},\n    output: {path: 'build', filename: 'two-bundle.js'},\n    plugins: [assetsPluginInstance]\n  }\n])\n```\n\n\n### Using this with Rails\n\nYou can use this with Rails to find the bundled Webpack assets via Sprockets.\nIn `ApplicationController` you might have:\n\n```ruby\ndef script_for(bundle)\n  path = Rails.root.join('app', 'views', 'webpack-assets.json') # This is the file generated by the plug-in\n  file = File.read(path)\n  json = JSON.parse(file)\n  json[bundle]['js']\nend\n```\n\nThen in the actions:\n\n```ruby\ndef show\n  @script = script_for('clients') # this will retrieve the bundle named 'clients'\nend\n```\n\nAnd finally in the views:\n\n```erb\n<div id=\"app\">\n  <script src=\"<%= @script %>\"></script>\n</div>\n```\n\n## Test\n\n```sh\nnpm test\n```\n",
  "readmeFilename": "readme.md",
  "_id": "assets-webpack-plugin@3.6.0",
  "_from": "assets-webpack-plugin@"
}
